import travisgen
import os
import os.path

versions = ["2.6", "2.7", "pypy", "3.2", "3.3", "3.4", "3.5", "pypy3"]
version_to_target = {
    "pypy": "2.7",
    "pypy3": "3.2"
}
pypy_versions = ["pypy", "pypy3"]
py2_versions = ["2.6", "2.7", "pypy"]
noipy_versions = ["2.6", "3.2", "pypy3"]
py35_versions = ["3.5"]

def cocotravis(test, version):
    """Generates .travis.yml test commands for Coconut and Cocotest."""
    target = version_to_target[version] if version in version_to_target else version
    pypy = version in pypy_versions
    py2 = version in py2_versions
    version_num = "2" if py2 else "3"
    other_version_num = "3" if py2 else "2"
    py35 = version in py35_versions
    ipy = version not in noipy_versions

    if test:
        install_cmds = [
            "pip install .",
            "pip install autopep8",
            "git clone https://github.com/evhub/cocotest.git",
            "cd cocotest",
            "git clone https://github.com/evhub/prisoner.git",
            "git clone https://github.com/evhub/pyston.git"
        ]
    else:
        install_cmds = [
            "pip install coconut",
            "pip install autopep8",
            "git clone https://github.com/evhub/prisoner.git"
        ]
    if py2:
        install_cmds.append("pip install futures")
    if ipy:
        install_cmds.append("pip install jupyter")
    if not py35:
        install_cmds.append("rm src/cocotest/py35_test.coc")
    install_cmds.extend([
        "rm src/cocotest/py"+other_version_num+"_test.coc",
        "mkdir src_target",
        "cp -r src/* src_target",
        "rm src/cocotest/py"+version_num+"_test.coc"
    ])
    if py35:
        install_cmds.append("rm src/cocotest/py35_test.coc")

    script_cmds = [
        "coconut --version --color cyan",
        "coconut --help",
        r'''coconut --strict --display --code "assert '__coconut__' in \`globals\`; msg = '<success>'; pmsg = print\$(msg); pmsg()"''',
        r'''echo "assert '__coconut__' in \`globals\`; msg = '<success>'; pmsg = print\$(msg); pmsg()" | coconut --strict --display''',
        r'''python -c "from coconut.convenience import parse; exec(parse('assert \'__coconut__\' in \`globals\`; msg = \'<success>\'; pmsg = print\$(msg); pmsg()'))"'''
    ]
    if ipy:
        script_cmds.extend([
            r'''ipython --ext coconut -c "%coconut assert '__coconut__' in \`globals\`; msg = '<success>'; pmsg = print\$(msg); pmsg()"''',
            "coconut --jupyter"
            ])
    if pypy:
        script_cmds.append("coconut pyston")
        if ipy:
            script_cmds.extend([
                "pushd pyston",
                "python runner.py",
                "popd"
            ])
    else:
        script_cmds.append("coconut pyston --recursionlimit 1100")
    script_cmds.extend([
        "coconut prisoner --strict",

        "coconut extras.coc --strict",
        "python extras.py",

        "coconut src/runner.coc file_build --strict",
        "coconut src/cocotest/__init__.coc file_build/cocotest --strict",
        "coconut src/cocotest/main.coc file_build/cocotest --strict",
        "coconut src/cocotest/util.coc file_build/cocotest --strict",
        "coconut src/cocotest/tutorial.coc file_build/cocotest --strict",
        "coconut src_target/cocotest/py"+version_num+"_test.coc file_build/cocotest --strict --target "+target,
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc file_build/cocotest --strict --target "+target+""
        )
    script_cmds.extend([
        "python file_build/runner.py",
        "coconut src file_build --strict --standalone",
        "python file_build/runner.py",

        "coconut src folder_build --strict",
        "coconut src_target/cocotest/py"+version_num+"_test.coc folder_build/cocotest --strict --package --target "+target,
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc folder_build/cocotest --strict --package --target "+target+""
        )
    script_cmds.extend([
        "python folder_build/runner.py",
        "coconut src/runner.coc folder_build --strict --package",
        "coconut src/cocotest/__init__.coc folder_build/cocotest --strict --package",
        "coconut src/cocotest/main.coc folder_build/cocotest --strict --package",
        "coconut src/cocotest/util.coc folder_build/cocotest --strict --package",
        "coconut src/cocotest/tutorial.coc folder_build/cocotest --strict --package",
        "python folder_build/runner.py",

        "mkdir -p run_build/cocotest",
        "cp -r folder_build/* run_build",
        "cp src/runner.coc run_build",
        "pushd run_build",
        "coconut --run runner.coc --nowrite --strict",
        "coconut --display runner.coc --nowrite --quiet --strict | python",
        "popd",

        "coconut src force_build --strict --force",
        "coconut src_target/cocotest/py"+version_num+"_test.coc force_build/cocotest --strict --package --force --target "+target,
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc force_build/cocotest --strict --package --force --target "+target+""
        )
    script_cmds.extend([
        "python force_build/runner.py",
        "coconut src force_build --strict",
        "python force_build/runner.py",
        "coconut src force_build --strict --force",
        "python force_build/runner.py",

        "coconut src strictless_build",
        "coconut src_target/cocotest/py"+version_num+"_test.coc strictless_build/cocotest --package --target "+target,
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc strictless_build/cocotest --package --target "+target+""
        )
    script_cmds.extend([
        "python strictless_build/runner.py",

        "coconut src minify_build --strict --minify",
        "coconut src_target/cocotest/py"+version_num+"_test.coc minify_build/cocotest --strict --package --target "+target+" --minify",
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc minify_build/cocotest --strict --package --target "+target+" --minify",
        )
    script_cmds.extend([
        "python minify_build/runner.py",

        "coconut src linenumbers_build --strict --linenumbers",
        "coconut src_target/cocotest/py"+version_num+"_test.coc linenumbers_build/cocotest --strict --package --target "+target+" --linenumbers",
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc linenumbers_build/cocotest --strict --package --target "+target+" --linenumbers",
        )
    script_cmds.extend([
        "python linenumbers_build/runner.py",

        "coconut src lns_min_build --strict --linenumbers --minify",
        "coconut src_target/cocotest/py"+version_num+"_test.coc lns_min_build/cocotest --strict --package --target "+target+" --linenumbers --minify",
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc lns_min_build/cocotest --strict --package --target "+target+" --linenumbers --minify",
        )
    script_cmds.extend([
        "python lns_min_build/runner.py",

        "coconut src autopep8_build --strict --autopep8",
        "coconut src_target/cocotest/py"+version_num+"_test.coc autopep8_build/cocotest --strict --package --target "+target+" --autopep8",
    ])
    if py35:
        script_cmds.append(
        "coconut src_target/cocotest/py35_test.coc autopep8_build/cocotest --strict --package --target "+target+" --autopep8",
        )
    script_cmds.extend([
        "python autopep8_build/runner.py",

        "coconut src_target target_build --strict --display --target "+target,
        "python target_build/runner.py"
    ])

    return install_cmds, script_cmds

main_dir = os.path.join("..", "cocotest")
cocotravis_main = travisgen.builder(main_dir, "python", versions, cocotravis$(False))

test_dir = os.path.join("..", "coconut")
cocotravis_test = travisgen.builder(test_dir, "python", versions, cocotravis$(True))

if __name__ == "__main__":
    cocotravis_main()
    cocotravis_test()
