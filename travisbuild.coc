import travisgen
import os
import os.path

versions = ["2.6", "2.7", "pypy", "3.3", "3.4", "3.5"]
noipy_versions = ["2.6"]
py2_versions = ["2.6", "2.7", "pypy"]

def cocogen(test, version):
    """Generates .travis.yml test commands for Coconut and Cocotest."""

    if version in py2_versions:
        version_num = "2"
        other_version_num = "3"
    else:
        version_num = "3"
        other_version_num = "2"

    if test:
        install_cmds = [
            "pip install .",
            "pip install autopep8",
            "git clone https://github.com/evhub/cocotest.git",
            "cd cocotest",
            "git clone https://github.com/evhub/prisoner.git"
        ]
    else:
        install_cmds = [
            "pip install coconut",
            "pip install autopep8",
            "git clone https://github.com/evhub/prisoner.git"
        ]

    if version not in noipy_versions:
        install_cmds.append("pip install ipython")

    install_cmds.extend([
        "rm src/cocotest/py"+other_version_num+"_test.coc",
        "cp -r src src_target",
        "rm src/cocotest/py"+version_num+"_test.coc"
    ])

    script_cmds = [
        r'''coconut --version''',
        r'''coconut --strict --display --code "assert '__coconut__' in \`globals\`; msg = '<success>'; pmsg = print\$(msg); pmsg()"''',
        r'''echo "assert '__coconut__' in \`globals\`; msg = '<success>'; pmsg = print\$(msg); pmsg()" | coconut --strict --display''',
        r'''python -c "from coconut.convenience import parse; exec parse('assert \'__coconut__\' in \`globals\`; msg = \'<success>\'; pmsg = print\$(msg); pmsg()')"'''
    ]

    if version not in noipy_versions:
        script_cmds.append(r'''ipython --ext coconut -c "%coconut assert '__coconut__' in \`globals\`; msg = '<success>'; pmsg = print\$(msg); pmsg()"''')

    script_cmds.extend([
        "coconut prisoner --strict",

        "coconut src/runner.coc file_build --strict",
        "coconut src/cocotest/__init__.coc file_build/cocotest --strict",
        "coconut src/cocotest/main.coc file_build/cocotest --strict",
        "coconut src/cocotest/util.coc file_build/cocotest --strict",
        "coconut src_target/cocotest/py"+version_num+"_test.coc file_build/cocotest --strict --target "+version_num,
        "python -tt file_build/runner.py",

        "coconut src/cocotest run_build/cocotest --strict",
        "cp src/runner.coc run_build/runner.coc",
        "cp file_build/cocotest/py"+version_num+"_test.py run_build/cocotest/py"+version_num+"_test.py",
        "cd run_build",
        "coconut --run runner.coc --nowrite --strict",
        "cd ..",

        "coconut src folder_build --strict",
        "cp file_build/cocotest/py"+version_num+"_test.py folder_build/cocotest/py"+version_num+"_test.py",
        "python -tt folder_build/runner.py",

        "coconut src force_build --strict --force",
        "cp file_build/cocotest/py"+version_num+"_test.py force_build/cocotest/py"+version_num+"_test.py",
        "python -tt force_build/runner.py",
        "coconut src force_build --strict",
        "python -tt force_build/runner.py",
        "coconut src force_build --strict --force",
        "python -tt force_build/runner.py",

        "coconut src autopep8_build --strict --autopep8",
        "cp file_build/cocotest/py"+version_num+"_test.py autopep8_build/cocotest/py"+version_num+"_test.py",
        "python -tt autopep8_build/runner.py",

        "coconut src_target target_build --strict --display --target "+version_num,
        "python -tt target_build/runner.py"
    ])

    return install_cmds, script_cmds

main_dir = os.path.join(".", "cocotest")
cocogen_main = travisgen.builder(main_dir, "python", versions, cocogen$(False))

test_dir = os.path.join(".", "coconut")
cocogen_test = travisgen.builder(test_dir, "python", versions, cocogen$(True))

def ensure_dir(directory):
    """Ensures that a directory exists."""
    if not os.path.exists(directory):
        os.makedirs(directory)

if __name__ == "__main__":
    ensure_dir(main_dir)
    cocogen_main()
    ensure_dir(test_dir)
    cocogen_test()
